{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to The Data Science Class","text":""},{"location":"#introduction","title":"Introduction","text":"<p>In this class, we will explore the fundamental concepts and techniques used in the field of data science, including statistical analysis, machine learning, data visualization, and more. You will learn how to extract insights and make predictions from large and complex datasets using a variety of tools and techniques. Whether you are new to the field or have some experience, this class will provide you with the skills and knowledge you need to succeed as a data scientist. </p>"},{"location":"#what-is-data-science","title":"What is Data Science","text":"<p>Data science is an interdisciplinary field that uses scientific methods, processes, algorithms and systems to extract knowledge and insights from structured and unstructured data. It involves the use of various techniques and tools such as machine learning, statistical analysis, and visualization to extract useful information and insights from data. This information can then be used to make decisions, predictions, or to inform research.</p> <p></p> <p>Data science is used in a wide range of fields such as finance, healthcare, retail, marketing, transportation, and many more. It has become increasingly important as the amount of data generated by modern technology continues to grow.</p> <p></p> <p></p>"},{"location":"#planning-of-the-course","title":"Planning of the course","text":"<ul> <li> <p>Python Programming : Python's simplicity, readability, and the availability of powerful libraries and modules make it a great choice for data science tasks, from data manipulation and analysis to building and deploying machine learning models.</p> </li> <li> <p>Data Base Management System : In data science, it is often necessary to work with large amounts of data that are stored in databases. Database management systems (DBMS) provide a way to organize, store, and retrieve data in an efficient and organized way.</p> </li> <li> <p>R Programming : R is particularly useful for data analysis in fields such as genomics, finance, and social sciences.</p> </li> <li> <p>Exploratory Data Analysis : Is an essential step in the data science process. It is the process of analyzing and summarizing the main characteristics of a data set, and is used to uncover patterns, trends, and relationships within the data. EDA helps data scientists to understand the data they are working with, identify any potential issues or biases, and select the appropriate statistical techniques to use for further analysis. It also helps to create a solid foundation for building models and making predictions. </p> </li> <li> <p>Machine Learning :  It is a branch of artificial intelligence based on the idea that systems can learn from data, identify patterns and make decisions with minimal human intervention. Machine learning focuses on the development of algorithms and statistical models that enable computers to learn from and make predictions or decisions without being explicitly programmed to perform the task</p> </li> <li> <p>Deep Learning : Deep learning is a subfield of machine learning that is inspired by the structure and function of the brain, specifically the neural networks. It involves training large artificial neural networks to perform tasks such as image and speech recognition, natural language processing, and decision making. These neural networks are trained using large amounts of data and are able to learn and improve over time. Deep learning has achieved state-of-the-art results in many areas and has revolutionized the field of artificial intelligence. It is widely used in applications such as computer vision, natural language processing, and self-driving cars.</p> </li> <li> <p>AI models Deployement : AI models deployments refer to the process of taking a trained AI model and making it available for use in a production environment. This can include things like scaling the model to handle large amounts of data, integrating the model with other systems and software, and monitoring the performance of the model in a live setting.</p> </li> <li> <p>Data Visualization using Tableau/Power Bi : Data visualization is the process of creating graphical representations of data in order to effectively communicate insights and findings. Tableau and Power BI are both popular tools used for data visualization. They offer a wide range of interactive visualizations, including maps, charts, and dashboards</p> </li> <li> <p>Capstone Project : The project is designed to apply the knowledge and skills that students have learned throughout the program. It is typically a hands-on, real-world project that requires students to use data science techniques and tools to solve a problem or answer a research question. The project can be based on any topic that is relevant to data science and can include tasks such as data collection, cleaning, exploration, analysis, modeling, and visualization.</p> </li> </ul> <p></p> <p>Let's get started!</p>"},{"location":"basic/","title":"Basic Python Concepts","text":""},{"location":"basic/#basic-python-concepts","title":"Basic Python Concepts","text":""},{"location":"basic/#variables","title":"Variables","text":"<p>Variables are used to store values in Python. They are like containers that hold data, and you can use them to perform operations on that data. Variables are declared using the assignment operator (=) and can be of different types, such as integers, floating-point numbers, strings, and more.</p> <pre><code># Example of variable assignment\nx = 5\ny = \"Hello World\"\nz = [1, 2, 3]\n</code></pre>"},{"location":"basic/#data-types-and-structures","title":"Data types and structures","text":"<p>Python supports several built-in data types, such as integers, floating-point numbers, strings, lists, tuples, and dictionaries. Each data type has its own set of characteristics and methods.</p> <pre><code># Example of different data types\nx = 5 # integer\ny = 3.14 # floating-point number\nz = \"Hello World\" # string\na = [1, 2, 3] # list\nb = (4, 5, 6) # tuple\nc = {\"name\": \"John\", \"age\": 30} # dictionary\n</code></pre>"},{"location":"basic/#operators","title":"Operators","text":"<p>Python supports various types of operators, such as arithmetic operators (+, -, x , /, %), comparison operators (&gt;, &lt;, &gt;=, &lt;=, ==, !=), and logical operators (and, or, not). These operators are used to perform different types of operations on variables and data.</p> <pre><code># Example of operators\nx = 5\ny = 2\n\n# arithmetic operators\nprint(x + y) # 7\nprint(x - y) # 3\nprint(x * y) # 10\nprint(x / y) # 2.5\nprint(x % y) # 1\n\n# comparison operators\nprint(x == y) # False\nprint(x &gt; 2) # True\n\n# logical operators \nprint(x == y and x &gt; 2) # False\nprint(x == y or x &gt; 2) # True\n</code></pre>"},{"location":"basic/#control-flow","title":"Control flow","text":"<p>Control flow or Conditional Statements allows us to control the flow of execution of our program based on certain conditions. For example : </p> <ul> <li>if-elif-else statements </li> </ul> <pre><code>x = 5\nif x &gt; 0:\n    print(\"x is positive\")\nelif x &lt; 0:\n    print(\"x is negative\")\nelse:\n    print(\"x is zero\")\n</code></pre> <ul> <li>for loop</li> </ul> <pre><code>for i in range(5):\n    print(i)\n</code></pre> <ul> <li>while loop  </li> </ul> <pre><code>x = 5\nwhile x &gt; 0:\n    print(x)\n    x -= 1\n</code></pre>"},{"location":"basic/#functions","title":"Functions","text":"<p>Functions are a way to group together a set of instructions to perform a specific task. Functions are defined using the def keyword and can take input arguments and return output values.</p> <pre><code>def add(x, y):\n    return x + y\n\nresult = add(5, 2)\nprint(result) # 7\n</code></pre>"},{"location":"basic/#modules-and-libraries","title":"Modules and Libraries","text":"<p>Python has a large number of built-in modules and libraries that provide a wide range of functionality. You can use these modules to perform various tasks, such as working with the file system, performing mathematical calculations, and more.</p> <pre><code># Example of importing a module\nimport math\n\nresult = math.sqrt(16)\nprint(result) # 4.0\n\n# Example of importing a specific function from a module\nfrom math import sqrt\n\nresult = sqrt(16)\nprint(result) # 4.0\n</code></pre>"},{"location":"basic/#exception-handling","title":"Exception Handling","text":"<p>Python supports exception handling, which allows you to handle errors and exceptions that may occur while running your program. This helps you to write robust code that can handle unexpected situations</p> <pre><code>while True:\n    try:\n        x = int(input(\"Please enter a number: \"))\n        y = int(input(\"Please enter another number: \"))\n        print(\"The result of x/y is:\", x/y)\n        break\n    except ValueError:\n        print(\"Oops! One of the inputs was not a valid number. Try again...\")\n    except ZeroDivisionError:\n        print(\"Oops! You cannot divide by zero. Try again...\")\n</code></pre> <p>In this example, program will handle two types of exception: ValueError and ZeroDivisionError, as the user input may not be valid number and also user may try to divide by zero.</p> <p></p> <p>Now, let's code ! </p>"},{"location":"basic/#things-to-remember","title":"Things to Remember","text":"<ul> <li> <p>Case Sensitivity: Python is a case-sensitive language, so be mindful of the case when naming variables, functions, and classes. This means, Variable and variable are not the same.</p> </li> <li> <p>Each variable, function and class should have a unique name within your code</p> </li> <li> <p>The only variables you need to consider inside your function are the arguments of that function</p> </li> <li> <p>Always give the identifiers a name that makes sense. While c = 10 is a valid name, writing count = 10 would make more sense, and it would be easier to figure out what it represents when you look at your code after a long gap.</p> </li> <li> <p>Multiple words can be separated using an underscore, like this_is_a_long_variable.</p> </li> <li> <p>Comments: Use the pound symbol (#) to denote comments in your code, which will be ignored by the interpreter. In computer programming, comments are hints that we use to make our code more understandable. </p> </li> <li> <p>Quotation Marks: In Python, you can use either single quotes or double quotes to denote strings, but be consistent within your code.</p> </li> <li> <p>Colon (:): Colons are used to denote the start of a new block of code, such as in a for loop, if statement, or function definition.</p> </li> <li> <p>White Space: Be mindful of white space, as it can affect the way your code is interpreted. For example, leading white space is used to denote blocks of code.</p> </li> <li> <p>Parentheses: Parentheses are used to group expressions, to call functions, and to define tuples.</p> </li> <li> <p>Import Statement: Use the import statement to import libraries and modules into your code.</p> </li> <li> <p>print() function: Use the print() function to output text to the console.</p> </li> </ul>"},{"location":"env/","title":"Setting up a Development Environment","text":""},{"location":"env/#setting-up-a-development-environment","title":"Setting up a Development Environment","text":""},{"location":"env/#introduction","title":"Introduction","text":"<p>In this chapter, you will learn how to set up a Python development environment on your computer. A development environment is a software application that provides the necessary tools and resources for writing, testing, and debugging code. By the end of this chapter, you will have a working Python environment that you can use to start writing your own programs.</p>"},{"location":"env/#installing-python","title":"Installing Python","text":"<p>There are several ways to install Python 3, here are some of the most common methods:</p>"},{"location":"env/#using-anaconda","title":"Using Anaconda","text":"<p>Anaconda is a popular distribution of Python and R for data science and machine learning. It comes with a lot of packages and libraries pre-installed, and it also includes the conda package manager, which makes it easy to install additional packages and manage environments. To install Python using Anaconda, you can follow these steps:</p> <ul> <li>Go to the Anaconda Website and download the latest version of Anaconda for your operating system.</li> <li>Once the download is complete, run the installer and follow the prompts to install Anaconda.</li> <li>Once installation is complete, open Anaconda Navigator, which is a graphical user interface that allows you to manage your environments and packages.</li> <li>Create a new environment with Python 3 by clicking the \"Create\" button and selecting \"Python 3\" as the version.</li> </ul>"},{"location":"env/#using-pip","title":"Using pip","text":"<p>pip is the package installer for Python. It allows you to install and manage packages for your Python installation. To install Python 3 and Jupyter Notebook using pip, you can follow these two steps:</p> <ul> <li> <p>Make sure that Python 3 is installed on your system by running the command <code>python3 --version</code> in a terminal or command prompt.</p> </li> <li> <p>If Python 3 is not installed, download the latest version from The Official Python Website.</p> </li> </ul>"},{"location":"env/#using-homebrew-macos-and-linux","title":"Using Homebrew (macOS and Linux)","text":"<p>Homebrew is a package manager for macOS and Linux. It allows you to install and manage packages for your operating system. To install Python 3 using Homebrew, you can follow these steps:</p> <ul> <li>Make sure that Homebrew is installed on your system by running the command <code>brew --version</code> in a terminal.</li> <li>If Homebrew is not installed, you can install it by following the instructions on The Homebrew Website.</li> <li>Once you have Homebrew installed, you can use it to install Python 3 by running the command <code>brew install python3</code> in a terminal.</li> </ul>"},{"location":"env/#using-chocolatey-windows","title":"Using Chocolatey (Windows)","text":"<p>Chocolatey is a package manager for Windows. It allows you to install and manage packages for your operating system. To install Python 3 using Chocolatey, you can follow these steps:</p> <ul> <li>Make sure that Chocolatey is installed on your system by running the command <code>choco --version</code> in a command prompt.</li> <li> <p>If Chocolatey is not installed, you can install it by following the instructions on The Chocolatey Website.</p> </li> <li> <p>Once you have Chocolatey installed, you can use it to install Python 3 by running the command <code>choco install python</code> in a command prompt.</p> </li> </ul> <p>PS : It's also worth noting that many operating systems and Linux distributions come with Python 2 pre-installed, and you may want to install Python 3 alongside it without replacing the pre-installed Python 2. In this case, you should be careful when running pip and python commands, since you may need to use pip3 and python3, respectively, to ensure that you're using the correct version of the software.</p>"},{"location":"env/#choosing-an-ide-or-text-editor","title":"Choosing an IDE or Text Editor","text":"<p>Once you have Python installed, the next step is to choose a text editor or integrated development environment (IDE) to write your code in. An IDE is a software application that provides a comprehensive environment for coding, including features such as syntax highlighting, code completion, and debugging tools. In this class we're using Jupyter. Jupyter is an open-source web-based IDE that allows users to create and share documents that contain live code, equations, visualizations, and narrative text. It is particularly well-suited for data science because it:</p> <ul> <li> <p>Provides an easy way to interact with data: Jupyter allows you to load, visualize, and manipulate data in a variety of formats, such as CSV, JSON, and SQL. This makes it a great tool for data exploration and analysis.</p> </li> <li> <p>Supports multiple programming languages: Jupyter supports many programming languages, including Python, R, and Julia, which makes it easy to use the language that is best suited for your project.</p> </li> <li> <p>Enables reproducible research: Jupyter allows you to organize your code, data, and visualizations in a single document, which makes it easy to reproduce your results and share your work with others.</p> </li> <li> <p>Provides a collaborative environment: Jupyter allows multiple users to work on the same notebook at the same time, which makes it a great tool for collaborative data science projects.</p> </li> <li> <p>Has a large and active community: Jupyter has a large and active community of developers, users, and contributors who provide support, resources, and add-ons that extend its functionality.</p> </li> </ul> <p>To install Jupyter:</p> <ul> <li> <p>Using Anaconda: In your conda enviroment you can install Jupyter Notebook by running the command <code>conda install jupyter</code>. </p> </li> <li> <p>Using pip3: You can install Jupyter using the pip package manager by running the command <code>pip3 install jupyter</code> in your command line. This method requires that you have Python3 and pip3 already installed on your system.</p> </li> </ul> <p>You can then launch Jupyter Notebook by running the command jupyter notebook in a terminal or command prompt.</p> <p></p> <p></p> <p></p> <p>Some popular IDEs for Python include PyCharm, Spyder, and IDLE. Text editors, such as Sublime Text, Atom, or Notepad++, are also popular among Python developers and are preferred by some. I suggest you Install Sublime Text as a second IDE.</p>"},{"location":"env/#installing-additional-libraries-and-packages","title":"Installing Additional Libraries and Packages","text":"<p>Python has a vast collection of libraries and packages that can be used to perform a wide range of tasks. Some popular packages include NumPy and Pandas for data manipulation, Matplotlib and Seaborn for data visualization, and scikit-learn for machine learning. You can install these packages using the pip package manager, which is included with Python.</p> <p></p> <p>Examples : </p> <ul> <li><code>pip3 install numpy</code></li> <li><code>pip3 install pandas</code></li> </ul>"},{"location":"env/#conclusion","title":"Conclusion","text":"<p>By the end of this chapter, you should have a working Python development environment that you can use to start writing your own programs. You will have a Python interpreter, a text editor or IDE, and any additional libraries and packages that you need. In the next chapter, you will learn the basics of Python programming, including data types, variables, and operators.</p>"},{"location":"intro/","title":"Introduction to Python Programming","text":""},{"location":"intro/#introduction-to-python-programming","title":"Introduction to Python Programming","text":"<p>Python is a powerful, high-level programming language that is widely used for web development, data analysis, machine learning, and scientific computing. Its simple, easy-to-read syntax and versatile libraries make it a popular choice for beginners and experienced programmers alike. </p> <p></p> <p>In this course, you will learn the basics of Python programming, including data types, variables, operators, control flow, and functions. You will also explore advanced topics such as data structures, working with data, data visualization, and machine learning. Along the way, you will gain hands-on experience through a variety of exercises and a final project.</p> <p></p> <p>By the end of this course, you will have a solid foundation in Python programming, and the skills to apply it to a wide range of data science and other applications.</p>"},{"location":"intro/#various-recources-for-you-to-practice","title":"Various Recources for you to practice","text":"<ul> <li> <p>Codecademy's Learn Python Track: This interactive course covers all the basics of Python and includes exercises to practice what you've learned.</p> </li> <li> <p>HackerRank's Python Domain: This website offers a wide range of Python coding challenges, from beginners to advanced levels.</p> </li> <li> <p>Python.org's Beginner's Guide: This guide provides a gentle introduction to Python, including tutorials and exercises for beginners.</p> </li> <li> <p>Google's Python Class: This free class, taught by Google engineer Nick Parlante, includes video lectures, slides, and exercises.</p> </li> <li> <p>Full Stack Python : Is a website that provides resources and tutorials on various aspects of the Python programming language, with a focus on web development and data science. Additionally, the website provides a curated list of resources for further learning and a podcast discussing all things Python.</p> </li> <li> <p>Code Signal : Is a website and platform that provides a variety of tools and resources for developers, including a code editor, a test runner, and a code execution environment. It also provides a variety of challenges and assessments to help developers improve their coding skills. </p> </li> </ul>"},{"location":"oop/","title":"Object Oriented Programming in Python","text":""},{"location":"oop/#introduction","title":"Introduction","text":"<p>In the last chapter we learnt the basics of programming, you were shown how to store data in data structures such as lists, strings, integers, dictionaries, and others. And you were shown how to create behavior for your program using keywords, and later using functions to group these keywords. This coding approache is called Logic Programming.</p> <p></p> <p>However, there are different approaches or perspectives in computer programming which we call programming paradigms. They provide various ways of organizing and structuring code to solve a particular problem.</p> <p></p> <p>Each paradigm has its own strengths, weaknesses, and suitability for different types of problems and use cases. Some programming languages may support multiple paradigms, while others may have limited support for one specific paradigm.</p> <p></p> <p>In this course we will get to know the object-oriented programming (OOP), a programming paradigm widely used in Python.</p> <p></p> <p>PS: At this stage of the course, we assume that you know the basics of Python.</p>"},{"location":"oop/#object-oriented-programming-oop","title":"Object-oriented programming (OOP)","text":""},{"location":"oop/#what-is-it","title":"What is it ?","text":"<p>Object-oriented programming (OOP) is an approach that organizes software design based on objects, which are data fields with unique attributes and behaviors, instead of functions and logic. </p>"},{"location":"oop/#why-we-use-it","title":"Why we use it ?","text":"<p>One of the main benefits of OOP is its organization, which makes it easier for developers to collaborate on a project by dividing it into smaller groups. Additionally, OOP offers several other advantages, such as code reusability, scalability, and efficiency.</p>"},{"location":"oop/#oop-concepts","title":"OOP Concepts","text":"<ul> <li> <p>Class: A class is a blueprint for creating objects. It defines a set of attributes (properties) and methods (functions) that the objects created from the class will have. For example, you could create a \"Person\" class with attributes like name, age, and address, and methods like \"introduce\" and \"greet\".</p> </li> <li> <p>Object: An object is an instance of a class. When you create an object from a class, you get a specific \"realization\" of the class, with its own set of attributes and methods. For example, you could create two \"Person\" objects, \"John\" and \"Jane\", each with their own name, age, and address.</p> </li> <li> <p>Attributes: Attributes are the properties or characteristics of an object. They define the state of the object. In the example of the \"Person\" class, the attributes would be name, age, and address.</p> </li> <li> <p>Methods: Methods are the actions or behaviors of an object. They define what the object can do. In the example of the \"Person\" class, the methods would be \"introduce\" and \"greet\".</p> </li> </ul> <p>Here is a simple example of a Python class that defines a \"Person\" object:</p> <pre><code>class Person:\n    def __init__(self, name, age, address):\n        self.name = name\n        self.age = age\n        self.address = address\n\n    def introduce(self):\n        return f\"Hi, my name is {self.name} and I am {self.age} years old.\"\n\n    def greet(self, other_person):\n        return f\"Hello {other_person.name}, it's nice to meet you!\"\n</code></pre> <p>And here is how you can create objects from the \"Person\" class and use their attributes and methods:</p> <pre><code>john = Person(\"John\", 30, \"123 Main St.\")\njane = Person(\"Jane\", 25, \"456 Elm St.\")\n\nprint(john.introduce())  # Output: Hi, my name is John and I am 30 years old.\nprint(jane.greet(john))  # Output: Hello John, it's nice to meet you!\n</code></pre>"},{"location":"oop/#when-to-use-it","title":"When to use it ?","text":"<ul> <li> <p>Modeling real-world objects: You can create classes to model real-world objects in Python, such as dogs, cars, or books. For example, you can create a \"Dog\" class with properties like breed, name, and age, and methods like \"bark\", \"eat\", and \"sleep\". This makes it easier to manipulate and work with instances of the class, and to keep track of the state of each object.</p> </li> <li> <p>Building games: OOP is often used in game development to model game objects and their behaviors. For example, you can create a \"Player\" class to represent a player in a game, with properties like position, health, and score, and methods like \"move\", \"attack\", and \"jump\".</p> </li> <li> <p>Database applications: You can use OOP to interact with databases in Python. For example, you can create a \"Record\" class to represent a record in a database table, with properties like id, name, and date, and methods like \"insert\", \"update\", and \"delete\".</p> </li> <li> <p>Web development: OOP is commonly used in web development to build applications and services. For example, you can create a \"User\" class to represent a user of your application, with properties like name, email, and password, and methods like \"register\", \"login\", and \"logout\".</p> </li> <li> <p>Scientific simulations: OOP can be used to create scientific simulations, such as physical simulations or financial models. For example, you can create a \"Particle\" class to represent a particle in a physical simulation, with properties like position, velocity, and mass, and methods like \"move\", \"collide\", and \"absorb\".</p> </li> </ul> <p>These are just a few examples of how OOP can be used in Python. With its powerful and flexible object-oriented features, OOP is a widely used paradigm in Python and can be applied to many different types of projects.</p>"},{"location":"oop/#some-examples","title":"Some examples","text":"<ul> <li>Car: Create a class Car that represents a car. The class should have properties brand, model, and year, and a method drive that makes the car drive (print \"Driving the car !\").</li> </ul> <pre><code>## Class implementation\nclass Car:\n    def __init__(self, brand, model, year):\n        self.brand = brand\n        self.model = model\n        self.year = year\n\n    def drive(self):\n        print(\"Driving the car.\")\n\n## Object declaration\ncar1 = Car(\"Toyota\", \"Camry\", 2020)\ncar2 = Car(\"Honda\", \"Civic\", 2021)\nprint(car1.description())\n# Output: 2020 Toyota Camry\n\nprint(car2.description())\n# Output: 2021 Honda Civic\n</code></pre> <ul> <li>Dog: Create a class Dog that represents a dog. The class should have properties name, breed, and age, and a method bark that makes the dog bark (print \"Woof!\").</li> </ul> <pre><code>## Class implementation\nclass Dog:\n    def __init__(self, name, breed, age):\n        self.name = name\n        self.breed = breed\n        self.age = age\n\n    def bark(self):\n        print(\"Woof!\")\n\n## Object declaration\ndog = Dog(\"Max\", \"Labrador\", 5)\nprint(dog.bark())\n# Output: Woof! My name is Max.\n</code></pre> <p>Let's code !</p>"}]}